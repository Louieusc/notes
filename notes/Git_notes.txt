
GIT官网www.git-csm.com可下载最新GIT

1.安装后从Git Bash可打开窗口，提示行以$开头
  

2.命令$ mkdir mygit创建新目录mygit
  $cd mygit进入该目录
  $pwd可显示当前目录在哪
  $ git init可将该目录变成GIT可管理的repository（库）


3.新建文本并添加入库
  注：勿使用Windows记事本编辑任何文本文件，用VS Code编辑之
  A. 先用VSC写一个新文本，保存至先前的mygit目录下（可能需手动添加扩展名.txt）
  B. 用命令$ git add 新文本名，将此文本存入暂存区（Staged）
  C. $ git commit -m "简要说明此次动作内容"，为此次动作加注解
  D. 用dir或ls命令，可查看当前目录是否已有该文件


4.在已有文本中进行更改、添加
  A. 在VS Code中更改文本
  B. 在Git Bash运行命令git status看状态，系统会提示改文本已修改，但并未提交（Commit）
  C. 命令git diff，可查看修改详情
  D. 命令git add及git commit将修改内容加入库中，并注释
  E. 再运行命令git status查看状态，系统说当前无需要提交之修改，且工作树是干净的
  （注：仅在对文本刚进行更改之后，使用git diff命令才有效）
   (注：Git为大小写敏感，编辑时务必注意文件名的大小写)


5.查看文本被历次修改的记录及Commit ID号
  A. git log命令，即可显示历次修改的注释内容，顺序由新至旧，当前最新版本以HEAD表示，且每个commit都有一个很长的ID号。
  B. git reflog命令，可显示历次reset及每个版本的commit ID号。故即使关闭Git Bash仍可查到每个ID号的前7位
     (注：运行了git log后，必须按字母键Q才能退出log状态并回到git命令行)


6. 将某一版本改设为当前最新版（HEAD）
  A. 如想将之前一步的旧版本设为最新版本，用命令git reset --hard HEAD^。^表示前一个，如要之前第二个，则为^^。
     更多位可用数字，如HEAD~100
  B. 用git log发现，前一旧版已被设为最新HEAD，而且被替换的先前最新版本已消失。
  C. 如果想找回消失的那个版本，可在Git Bash窗口中找到该版本的commit ID号，记住前五位。再运行命令git reset --hard commit_id,
     即可又将该版设为最新HEAD。commit_id只需前5位即可
  D. 用git log查看，该版已显示并又成为HEAD
 （注： 命令git reset --hard commit_id，可将历次任一版本设置为最新HEAD）


7. 撤消修改
  A. 如果对文本作了一次修改，但并未add也未commit，现在要立即撤销修改，可用命令git restore --文件名
     然后用git status查看，系统显示工作树clean，即撤消修改完成。
  B. 如果对文本作了修改，且已经add(staged)但未commit，现在要撤销修改，可用命令git restore --staged文件名
     再用git status查看，发现系统称该文件并未add，即已退出stage目录区。
     此时再用命令git restore --文件名，然后用git status查看，系统显示工作树clean，完成撤消。
     (注：可从VS Code查看原文件代码，发现需要撤消的修改已经消失)
  C. 如果将修改既add入暂存区，也commit了，就用命令git reset --hard HEAD^，恢复到上一版本，修改自然消失)


8. 删除文件
  A. 可直接在文本所在文件甲删除，但GIT STATUS后会显示有文件被删。如果误删想恢复，可用命令git checkout -- 文件名。
  B. 另也可用命令git rm 文件名，可删除文件，然后再commit。该文件即被永久删除，不可恢复。



9. 建立远程库
  A. Github为此远程库，需先注册，再在GITBASH上用$ ssh-keygen -t rsa -C "youremail@example.com"，创建SSH KEY。
     此KEY位于本机c:\usr\louie\ssh\中，内有id_rsa.pub及id_rsa两文件。拷贝id_rsa.pub里的文本，粘贴至Github中的
     SSH key设置中即可。
  B. 在GITHUB上新建一个Repository，名字与本机已有repository相同。然后将二者建立关联：
     1. 在本地mygit库下运行命令$ git remote add origin git@github.com:louieusc/mygit.git      (注：louieusc是我在Github的ID)
     2. 首次把本地库的所有内容推送到远程库上并建立关联，用命令$ git push -u origin master
   (注：如需删除远程某库，在网站GitHub.com上进入repository页面，在需删除库下点击Settings，在Danger Zone中点击Delete this repository)


10. 关于多部主机向远程同一目录库发送提交
   A. 如果多部主机都需向远程同一Repository发送文件或commit，此时远程主机的repository会自动产生两个branch，一个名为
      master，另一个名为main。
   B. 平时把本地库所有最新内容推送至远程库，命令$ git push origin <branch name>。分支名为master或main。
   C. 如果多部主机向远程不同Repository发送文件，则远程主机的repository只分别产生个自的branch。


11. 克隆远程库
   A. 先在Github建立一个新库，命名为gitskill, 并勾选Initialize this repository with a README选项。
      此新库的SSH地址为：git@github.com:Louieusc/gitskill.git。它还有HTTPS地址为：https://github.com/Louieusc/gitskill.git
   B. 开启Git Bach，进入c:\usr\louie
   C. 运行命令git clone git@github.com:louieusc/gitskill.git
      如从HTTPS地址克隆，则运行git clone https://github.com/Louieusc/gitskill.git

   (克隆远程库便于将初始项目文件在远程库建立，各地主机从远程克隆)


12. 创建、合并Branch（分支）
   A. $ git checkout -b Branch名，可创建新Branch并切换入该Branch。
      （注：相当于git branch Branch名和git checkout Branch名两个命令的合成）
   B. $ git branch 查看当前分支，可见所有新、旧branch名，当前所在branch名字前有*号
   C. 在新branch路径下，更改本库的README.md文件并保存、add、commit。之后，在新branch中即产生一个修改后的README.md文件。
      只要不切换回原branch（main），可对该文件持续编辑多次。而原branch中的README.me并无改变，且新分支仅本机可见，原分支并无痕迹。

   D. 如要将新分支发往远程库，$git push origin 新分支名

   E. 如需将新编辑的README.md文件合并回原branch(main)，需：
      （1）切换回原branch，$ git checkout 原branch名
      （2）$ git merge 新branch名
   F. 如须删除分支，$ git branch -d branch名，即可删除该分支 
   (注：切换分支也可用 $ git switch branch名，创建并切换新分支也可用 $ git switch -c branch名)
   (如要删除已发至远程库上的分支，只能在远程库的branch页面中进行)


13. 查看、比较不同分支内的同一文件
   A. 先在Git Bach上切换到新分支，从本机硬盘中找到该库内的某文件，更改内容后关闭
   B. 在Git Bach上切换到原分支，再从本机硬盘中找到库内同一文件，查看内容并无变化，关闭
   C. 在Git Bach上切换回新分支，再从本机硬盘中找到该文件查看内容，发现内容已变为更新后内容。
  （注：只需切换分支，无需换主机，从文件的同一保存位置即可查看不同分支内的该文件版本）


14. 当不同分支内的编辑发生冲突时
   A. 如果在分支main内，编辑了文件README.MD，并add和commit。同时又在分支fea1内，也编辑了同名文件，并add和commit。此时如果merge fea1并不
      能合并之，系统会提示发生冲突Conflict要求修正。
   B. 进入原分支main中，打开文件README.MD，发现系统自动加入了二分支的新编辑内容，并以<<<<<<和=====间隔之。
      此时可直接编辑文本，将双方新编内容人工整合，保存。
   C. 将整合后文件add并commit。对冲突的修正即完成。用$ git log可查看分支内容合并的具体情况。
   D. 最后，可将新分支fea1删除掉。


15. 识别曾经merge过的分支
    通常merge branch后的文本并无特别标识。但在merge命令后加入 --no-ff 参数后，它会显示合并前的注释，从而发现合并痕迹。
   A. 在某目录下创建并切换分支
   B. 修改文件后add并commit
   C. 切换回原主支，$ git merge --no-ff -m "merge with no-ff" 新branch名，合并完成
      (注：此次的-m参数是把合并注释进去)

   D. 用$ git log可看到分支曾被合并过的信息


16. 封存当前工作状态
    如果在当前文件未进行完毕，虽已add但尚未commit时，如果急需解决另外文件问题，可先将当前文件封存起来，事后再解封。
   A. 在当前工作分支下，$ git stash
   B. $ git status，显示工作树clean，封存已完成
   C. $ git stash list，可显示封存信息
   D. $ git stash pop，可解封并删除stash信息。之后再用git stash list查看，再无stash信息了。


17. 关于Cherry-pick命令
   对在同一目录下，某分支Dev又在封存状态下，如果要把原主支（名为main）的新改动同步到封存分支的同名文件中，需要以下步骤：
   A. 封存分支暂时不要解封
   B. 为对主支main改动而新建的分支（名为issue），merge后也暂时不能删除此新分支
   C. 先在已封存的分支（名为dev）内运行$ git cherry-pick issue的commit id号，这样就能把改动一次同步到dev的同名文件中。无需merge
   D. 此时再删除新分支issue。
   E. 回到Dev分支，用命令$ git stash pop解封dev且删除stash信息。最后，commit先前未提交注释的文件
   (注：如果一个新分支已提交并注释，但并未merge至主支main，此时新分支不能被删除。如果确定需要删除，需用$ git branch -D 新分支名)



18. 关于远程库
   远程库的默认名都是origin
   A. $ git remote可查远程库名，$ git remote -v可查其详情
   B. 推送分支的最新内容，用$ git push origin <分支名>
   C. 最需要随时推送的分支是主支（如main或master），其他是否推送视情况而定。
   (注：分支在推送至远程库前，仅本地主机能查看分支内容）
   D. 如果多地主机同时向远程库同一分支推送不同内容的同名文件，后推送者会失败。此时，可用$ git pull从远程库拉取他人最新的提交，再合并、推送。 
      a. 先需$ git branch --set-upstream-to=origin/分支名 本地分支名，这将建立本地分支与远程库分支的链接 (分支名最好取为相同)
      b. 再用$ git pull
      c. 此时pull成功，但会显示二者文本有冲突。可手动合并之，再add和commit。
      d. 最后再push至远程库，$ git push origin <branch name>


19. 标签TAG管理
    TAG相当于一个commit的别名，但简洁有意义。通过它可以快速查找某个特定commit，从而进行相关处理。
   A. $ git tag <tag name> 可创建新标签，为分支内的最新commit
   B. $ git tag可查看当前分支内的所有标签号
   C. 如果要指定为先前某个commit创建标签，需先找到此commit的ID:
     a. 查找commit的ID，可运行$ git log --pretty=oneline --abbrev-commit，能显示历次commit的ID短号、注释和已有Tag信息
     b. 再运行$ git tag <tag name> <commit id短号>，即可创建标签

   D. $ git show <tagname>可查看标签具体信息
   E. 将标签全部推送至远程库 $ git push origin --tags 
      推送某一个标签至远程库 $ git push origin <branch name>
    (注：标签无论是在哪个分支内创建，它在目录内所有分支中都可见)
   F. 删除标签$ git tag -d <tag name>
   G. 删除远程库的某标签: 先删除本地某标签，再运行 $ git push origin :refs/tags/<tag name>


20. What is .MD extension in GitHub?
    MD means Markdown which is a plain-text file format. The extensions .md and .markdown are just text files written in Markdown syntax.
    If you have a Readme.md in your repo, GitHub will show the contents on the home page of your repo.


21. 如何参与GITHUB的一个开源项目
    A. 在Github网站上，找到该项目，点击右上的Fork即可将项目内容拷贝至自己在Github的帐号中
    B. 从本机运行$ git clone git@github.com:louieusc/<项目名>，即可将项目内容克隆到本机的库中。今后可在本机推送修改
    C. 如官方库能接受该修改，可在GitHub上发起一个pull request


22. 关于.gitignore忽略文件
    某些文件不便或不需提交但又需存入Git目录中，可在Repository下创建一个.gitignore文件，将不提交项列入文中
    A. <file name>: 将某文件列入忽略项
    B. <.*>: 将所有以.开头的文件列入忽略项
    C. <*.so>：将所有扩展名为so的文件列入忽略项
    D. !<file name>: 不用忽略的例外文件
    (注：.gitignore本质是一个plain text文件)
    (如果忽略成功，目录中即使新加入了该类型文件且在目录中可见，但运行$ git status后系统也会提示工作树clean，无文件需提交。
     如果例外成功，该文件被加入目录后，$ git status后系统将提示有文件需提交)


23. 配置别名Alias
    可将某些较复杂的命令设为简短的别名，之后运行命令时以别名代之
    A. $ git config --global alias.<alias> original name 
    (注：alias后有一点)
    B. 设置好的别名会自动存在GIT根目录下的.gitconfig文件中
    C. 也可在.gitconfig文件中直接创建、更改、删除别名
    (我已设如下别名：
        st = status
	cm = commit
	br = branch
	sw = switch)


24. 关于SourceTree
    Sourcetree是一个用于本地的图形化GIT软件。通过图形界面方便运行GitBash命令

    (注：如果不能Push至远程库，则Tools->Options->General: in SSH client configuration set the SSH Client to OpenSSH, 
    select your id_dsa for SSH Key. 即可解决push问题。)






































  
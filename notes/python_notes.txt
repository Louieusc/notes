PYTHON 3


1. 安装后的PYTHON在UBUNTU LINUX哪个位置？
  /usr/bin/python3
  
  
2. 如何运行一个PY文件？
   a. 进入到该文件所在目录后，运行$ python3 <file name.py>
   b. 或在VS Code中打开该文件，选择在terminal运行
   
   
3. BULL data includes False and True

4. or运算即或运算，只要其中有一个True，or运算结果就是True

5. \是转义字符，用于将该字符转义为原始义（非PYTHON义），如\'表示此时的引号'不再具PYTHON中表示字符串功能，而是显示引号自身。
   \n: 表示换行
   \\: 表示\自己
   
   
6. 如果要传输的文本包含大量英文字符，用UTF-8编码能节省空间

7. '中文'.encode('utf-8') ：将中文二字编码为byte码
   b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf8') ：将byte码解码
   
   
8. How to make 'python' program command execute Python3?
a. Find ~/.bashrc file:
b. Open the file and place 'alias python=python3' into it.
c. Run command '$ source ~/.bashrc'

Now, you can run python xx.py instead of python3 xx.py.


9. %s表示用字符串替换，%d表示用整数替换, %f表示用浮点数替换，%x表示用十六进制数替换
    如果不确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串
    如果%是一个普通字符，用%%表示一个%
    
    
10.变量名可采用Camel case命名方式，即首词字母小写，而次词的首字母大写，如myName
   或采用Pascal case命名式(MyName), 或Snake case命名式(my_name)
   
11. 多个变量可在同一行赋值，如： x, y, z = "Orange", "Banana", "Cherry"
         多个变量也可同时赋与相同值，如： x = y = z = "orange"
         也可用解包式赋值（Unpack a collection），如： 
         fruits = ["apple", "banana", "cherry"]
           x, y, z = fruits
             print(x)
             print(y)
             print(z)
  注：解包式赋值对list/tuple/set 都适用
  
  
12. 对多个变量的输出最好用逗号间隔的方式，对各类型变量都有效，少用加号。如： print(x, y)

13. 全局变量（Global Variable）
  指创建于函数之外、在全局都有效的变量，它在函数内外都能用（除非函数内已建同名本地变量）。
    A. 如果函数内已建本地同名变量，该本地变量只能在该函数内有效。而同名全局变量仍可在该函数外
         任何地方有效。如：
         x = "awesome"

           def myfunc():
           x = "fantastic"
           print("Python is " + x)

           myfunc()

         print("Python is " + x) 
    同为X，本地变量的"Pythone is fantastic"能先输出，而全局变量的"Pythone is awesome"也能稍后输出，
    互不影响。
  
   B. 加入全局关键词后，本地变量也能秒变全局变量，用于函数内外。如：
           def myfunc():
           global x
           x = "fantastic"
           
           myfunc()
           
           注：如果秒变的全局变量与先前的全局变量同名，先前的将被忽略，仅新建的同名全局变量有效。
           
           
14. PYTHON的数据类型

Text Type: 	str
Numeric Types: 	int, float, complex
Sequence Types: list, tuple, range
Mapping Type: 	dict
Set Types: 	set, frozenset
Boolean Type: 	bool
Binary Types: 	bytes, bytearray, memoryview
None Type: 	NoneType

   A、用type(<var_name>)，可查该变量的数据类型，如：
       x = 5
       print(type(x))
       
    (注：如果变量值为字符串，需加单引号或双引号)
    
   B、几种易混淆的类型
   x = ["apple", "banana", "cherry"] 	list 	
   x = ("apple", "banana", "cherry") 	tuple 	
   x = range(6) 	                range 	
   x = {"name" : "John", "age" : 36} 	dict 	
   x = {"apple", "banana", "cherry"} 	set 	
   x = frozenset({"apple", "banana", "cherry"})    frozenset
   
   
   C. e属于浮点，因它的值是2.718281828459045…
   D. Complex类型的数据都带有字母j
   
   E. 可用指定的方式转换数据类型，int(), float(), str()
              如：
      x = 1.5
      a = int (x)
      print (a)
      输入结果为1，成为整数类型
      （注：complex不能转换为其他类型）
   F. Python有一个产生随机数字的功能random，如:
       immport random
       print (random.randrange(0, 100))
           即可随机输出从0到100的任意数字
           
           
14. 用len()可得到字符串的长度，如：
       a = "Hello, World!"
       print(len(a))
       
15. If...in 及 If...else (条件判断)
        要查看某变量是否含有某内容，用If...in，如:
        x = "The best things in life"
        if "b" in x:
            print('Great!')
            
          要查看某变量是否未含某内容，用If...not in，如:
        x = "The best things in life"
        if "b" not in x:
            print('Great!')  
            
          如有后续动作需在查看后做出，用if...else，如:
          x = "The best things in life"
	  if "b" in x:
    		print('Great!')
	  else:
    		print('Ah-oh!')
    		
    		
16. 切片(Slicing)处理字符串
   print(b[start_index : end_index])     指定出字串的开始索引和末尾索引，进行切片
   （注：末尾索引本身不能输出，只输出开始到末尾之间的部分。且索引由0开始，标点符号也占索引位）
       如：x = "Hello, World!"
       print(b[2:5])
       将输出llo三个字符
   （注：如果索引由零开始，可省略0，如print(b[:15])。如果到末尾止，也可省略数字，如print([12:])）
   
   
17. upper() 和 lower()用于输出变量全为大写或小写，如:
	x = "Hello, World!"
	print(x.upper())
	
	
18. replace()用于替换变量的字节，如:
	x = "Hello, World!"
	print(x.replace("Hello", "Hi"))	
	
19. split()用于将字串按分隔符分隔成list，如：
	a = "Hello, World, is, the, best!"
	print(a.split(","))               #['Hello', ' World', ' is', ' the', ' best!']
	
	
20. 合并字串可以用＋号，中间如需增加空白必须用" "方式，如:
	a = "Hello"
	b = "World"
	c = a + ' ' + b
	print(c)
	
21. 设置变量时，只可将相同类型数据进行合并，如需合并不同类数据，必须用format()将不同类型的数据格式化，如：
	age = 30
	txt = "My name is Michale, I am {}"
	print(txt.format(age))           #My name is Michale, I am 30
	
    (注：或者将30改为字串变量"30"，也可达到相同输出) 

   


















  

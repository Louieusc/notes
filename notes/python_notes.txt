PYTHON 3


1. 安装后的PYTHON在UBUNTU LINUX哪个位置？
  /usr/bin/python3
  
  
2. 如何运行一个PY文件？
   a. 进入到该文件所在目录后，运行$ python3 <file name.py>
   b. 或在VS Code中打开该文件，选择在terminal运行
   
   
3. BULL data includes False and True

4. or运算即或运算，只要其中有一个True，or运算结果就是True

5. \是转义字符(Escape Character)，用于将该字符转为原始义（非PYTHON义），如\'表示此时的引号'不再具PYTHON中表示字符串功能，而是显示引号自身。
   \n: 换行
   \\: \
   \r: 回车
   \t: Tab
   
   
   
6. 如果要传输的文本包含大量英文字符，用UTF-8编码能节省空间

7. '中文'.encode('utf-8') ：将中文二字编码为byte码
   b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf8') ：将byte码解码
   
   
8. How to make 'python' program command execute Python3?
a. Find ~/.bashrc file:
b. Open the file and place 'alias python=python3' into it.
c. Run command '$ source ~/.bashrc'

Now, you can run python xx.py instead of python3 xx.py.


9. %s表示用字符串替换，%d表示用整数替换, %f表示用浮点数替换，%x表示用十六进制数替换
    如果不确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串
    如果%是一个普通字符，用%%表示一个%
    
    
10.变量名可采用Camel case命名方式，即首词字母小写，而次词的首字母大写，如myName
   或采用Pascal case命名式(MyName), 或Snake case命名式(my_name)
   
11. 多个变量可在同一行赋值，如： x, y, z = "Orange", "Banana", "Cherry"
         多个变量也可同时赋与相同值，如： x = y = z = "orange"
         也可用解包式赋值（Unpack a collection），如： 
         fruits = ["apple", "banana", "cherry"]
           x, y, z = fruits
             print(x)
             print(y)
             print(z)
  注：解包式赋值对list/tuple/set 都适用
  
  
12. 对多个变量的输出最好用逗号间隔的方式，对各类型变量都有效，少用加号。如： print(x, y)

13. 全局变量（Global Variable）
  指创建于函数之外、在全局都有效的变量，它在函数内外都能用（除非函数内已建同名本地变量）。
    A. 如果函数内已建本地同名变量，该本地变量只能在该函数内有效。而同名全局变量仍可在该函数外
         任何地方有效。如：
         x = "awesome"

           def myfunc():
           x = "fantastic"
           print("Python is " + x)

           myfunc()

         print("Python is " + x) 
    同为X，本地变量的"Pythone is fantastic"能先输出，而全局变量的"Pythone is awesome"也能稍后输出，
    互不影响。
  
   B. 加入全局关键词后，本地变量也能秒变全局变量，用于函数内外。如：
           def myfunc():
           global x
           x = "fantastic"
           
           myfunc()
           
           注：如果秒变的全局变量与先前的全局变量同名，先前的将被忽略，仅新建的同名全局变量有效。
           
           
14. PYTHON的数据类型

Text Type: 	str
Numeric Types: 	int, float, complex
Sequence Types: list, tuple, range
Mapping Type: 	dict
Set Types: 	set, frozenset
Boolean Type: 	bool
Binary Types: 	bytes, bytearray, memoryview
None Type: 	NoneType

   A、用type(<var_name>)，可查该变量的数据类型，如：
       x = 5
       print(type(x))
       
    (注：如果变量值为字符串，需加单引号或双引号)
    
   B、几种易混淆的类型
   x = ["apple", "banana", "cherry"] 	list 	
   x = ("apple", "banana", "cherry") 	tuple 	
   x = range(6) 	                range 	
   x = {"name" : "John", "age" : 36} 	dict 	
   x = {"apple", "banana", "cherry"} 	set 	
   x = frozenset({"apple", "banana", "cherry"})    frozenset
   
   
   C. e属于浮点，因它的值是2.718281828459045…
   D. Complex类型的数据都带有字母j
   
   E. 可用指定的方式转换数据类型，int(), float(), str()
              如：
      x = 1.5
      a = int (x)
      print (a)
      输入结果为1，成为整数类型
      （注：complex不能转换为其他类型）
   F. Python有一个产生随机数字的功能random，如:
       immport random
       print (random.randrange(0, 100))
           即可随机输出从0到100的任意数字
           
           
14. 用len()可得到字符串的长度，如：
       a = "Hello, World!"
       print(len(a))
       
15. If...in 及 If...else (条件判断)
        要查看某变量是否含有某内容，用If...in，如:
        x = "The best things in life"
        if "b" in x:
            print('Great!')
            
          要查看某变量是否未含某内容，用If...not in，如:
        x = "The best things in life"
        if "b" not in x:
            print('Great!')  
            
          如有后续动作需在查看后做出，用if...else，如:
          x = "The best things in life"
	  if "b" in x:
    		print('Great!')
	  else:
    		print('Ah-oh!')
    		
    		
16. 切片(Slicing)处理字符串
   print(b[start_index : end_index])     指定出字串的开始索引和末尾索引，进行切片
   （注：末尾索引本身不能输出，只输出开始到末尾之间的部分。且索引由0开始，标点符号也占索引位）
       如：x = "Hello, World!"
       print(b[2:5])
       将输出llo三个字符
   （注：如果索引由零开始，可省略0，如print(b[:15])。如果到末尾止，也可省略数字，如print([12:])）
   
   
17. upper() 和 lower()用于输出变量全为大写或小写，如:
	x = "Hello, World!"
	print(x.upper())          
	
	
18. replace()用于替换变量的字节，如:
	x = "Hello, World!"
	print(x.replace("Hello", "Hi"))	
	
19. split()用于将字串按分隔符分隔成list，如：
	a = "Hello, World, is, the, best!"
	print(a.split(","))               #['Hello', ' World', ' is', ' the', ' best!']
	
	
20. 合并字串可以用＋号，中间如需增加空白必须用" "方式，如:
	a = "Hello"
	b = "World"
	c = a + ' ' + b
	print(c)
	
21. 设置变量时只能将相同类型数据进行合并，对于不同类数据，必须用format()将其格式化，如：
	age = 30
	txt = "My name is Michale, I am {}"
	print(txt.format(age))           #My name is Michale, I am 30
	
    (注：另外一个办法是将30改为字符串类型"30"，也可得到相同输出) 
    
22. 对于多个变量的合并，也可一次性格式化。如：
	quantity = 3
	itemno = 512
	price = 49.99
	myorder = "I want {} pieces of item {} for {} dollars."
	print(myorder.format(quantity, itemno, price))
	
23. Python的Methods（类函数）：
	
	capitalize()	字符串的首字母转换为大写
	center()	居中
	count()		返回某值在字符串中出现的次数
	encode()	将字符串编码
	find()	        搜索字串中的某值并返回发现位置	
	index()	        搜索字串中的某值并返回发现位置
	format()	格式化字串
	isalnum()	如字串都为数字则返回TRUE	
	isdecimal()	如字串都带小数点则返回TRUE		
	islower()	如字串都为小写则返回TRUE	
	isspace()	如字串都为白空格则返回TRUE	
	isupper()	如字串都为大写则返回TRUE
	join()	        在字串结尾插入一个可迭代的元素	
	lower()		将字串转换为小写	
	partition()	在字串分离处返回一个元组(tuple)
	replace()	将字串替换为特定的值	
	split()		用分隔符切分字串并返回一个清单
	strip()		返回切割后的字串
	swapcase()	字串大小写互相切换
	title()		将每个词的首字母转换为大写
	translate()	返回翻译后的字符串
	upper()		字串转换为大写
	
  （注：使用以上Methods时，之前需加变量名及.标记。如：x.upper()。如需对整个变量进行处理，括号就留空；
  如需对字串中特定字符进行处理，则将特定值填入括号。如：x.find("i")）
  
  
24. 布尔值可直接通过Print来显示True或False结果，如：print(10>5)，将显示True
    另外，也可用一段语句来表示True或false的结果，如：
    x = 10
    y = 9
    if x>y:
    print('x is greater than y')
    else:
    print('x is less than y')
	
  (注：任何有内容的字符串、数字、ist, tuple, sets的布尔值都为True。任何零及空值都为False)
  
  
25. Python的运算符可用于数学运算、赋值运算、比较运算、逻辑运算、ID运算、归属运算(Membership)、位运算

	A. 数学运算符中，/ 为除运算，结果可有小数点。//为除运算，结果只为整数(Floor division)
           ** 为求幂
   
	B. 赋值运算符中，＝号表示所赋之值而非数学运算。运算符后跟＝号，表示运算后的结果。如：
	   +=, /=,     *=。5+=2，即为5+2=?
	c. 比较运算符中，==表示值相同，!=表示值不同，>=表示大于或等于，任一个满足即返回True
	d. 逻辑运算符有 and:二者皆为真，则返回True；否则返回False
	               or:只要其一为真，则返回True
	               not:反转，如结果为真，则返回False；如结果为假，返回True
	e. ID运算符有     is:  如二者相同，返回True
	               is not: 如二者不同，返回True
	f. 归属(Membership)运算符有        in: 如某值在序列中，则返回True
				      not in: 如某值不在序列中，则返回True
	g. 位运算符用于二进制的比较运算: &, |, ^(XOR), ~(NOT)
	

26. 四种内置集合数据类型： list, tuple, set, dict
    list具备有序性、可变性、值可重复
    tuple有序、不可变、允许重复值
    Set无序、不可变(但可加减)、不可索引、不允许重复值
    dict有序、可变、不能有重复值
    
    LIST:
    a. list由[ ]方括号包围，具备有序性、可变性，且值可重复
    b. 用len()函数可查询list内的item个数 
    c. item可以是任何数据类型，如字符串、数字、布尔值等
    d. 用list()也可创建新list，如thelist = list(("apple", "pear", "cherry"))  它等同于list = ['apple', 'pear', 'cherry']
    e. 可指定index number来输出特定列表值，如：
    	thelist = ["apple", "banana", "cherry"]
	print(thelist[1])         # 索引值由0开始。也可用负数反向索引，末尾从-1开始
    f. 也可指定range范围，如：
	    thelist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
	    print(thelist[2:5])   # 将输出cherry, orange, kiwi。末尾的5melon不在内
	    
	    thelist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
	    print(thelist[-4:-1])  #输出orange, kiwi, melon。末尾的-1mango不在内
	    
    g. 替换修改list内的值，需用到索引数：
    	thelist = ["apple", "banana", "cherry"]
	thelist[2] = "currant"
	print(thelist)    # 输出["apple", "banana", "currant"]
	
	thelist = ["apple", "banana", "cherry"]
	thelist[1:2] = ["currant", "watermelon"]
	print(thelist)     #输出["apple", "currant", "watermelon", "cherry"] 用两个水果名替换了一个水果名，其后的水果位置顺延
	
     h. 插入值到list，用insert():
     	thelist = ["apple", "banana", "cherry"]
	thelist.insert(1, "watermelon")
	print(thelist)     #输出["apple", "watermelon", "banana", "cherry"] 必须指定插入位置，其他原值不变只改变位置。如不指定插入位置将报error
	
     i. 加值到list，用append():
     	thelist = ["apple", "banana", "cherry"]
	thelist.append("orange")
	print(thelist)    #加入后，新值将位于list末尾。加值无须指定位置
	
     j. 用extend()，可将其他list的值延请至本list中：
	thislist = ["apple", "banana", "cherry"]
	tropical = ["mango", "pineapple", "papaya"]
	thislist.extend(tropical)
	print(thislist) 
     
     注：不能用extend方式加入其他list，但可加入其他tuple, set, dict
    	thelist = ["apple", "banana", "cherry"]
	thetuple = ("kiwi", "orange")
	thelist.extend(thetuple)
	print(thelist)
	
	k. 删除list内的值，用remove()；但要删除指定索引位置的值，需用pop()
	thislist = ["apple", "banana", "cherry"]
	thislist.remove("banana")
	print(thislist)
	
	thislist = ["apple", "banana", "cherry"]
	thislist.pop(1)
	print(thislist)     #如未指定索引数即pop()，将删除最后那个值。
	
	l. 用clear()可清空list内容，但保留list。用del <list_name>可删除list
	thislist = ["apple", "banana", "cherry"]
	thislist.clear()
	print(thislist)      #输入为[]

 	m. 采用loop(循环)的方式，可将list的值逐一显示出来。
 	   一、for...in循环，即for <loop_name> in <list_name>
 	   thelist = ["apple", "banana", "cherry"]
	   for x in thelist:
 	     print(x)          # 就是把list中每个item代入变量x，然后执行缩进处的命令
 	     
 	     
 	 n. 给list中的元素排序，用sort()。可按数字大小排序，也可按字母先后排序
 	 thislist = [100, 50, 65, 82, 23]
	 thislist.sort()
	 print(thislist)  ＃输出为[23, 50, 65, 82, 100]
	   
	 thislist = ["orange", "mango", "kiwi", "pineapple"]
	 thislist.sort()
	 print(thislist)  输出为["kiwi", "mango", "orange", "pineaplle"]
	   
	 (注：如需降序，即由大到小、由后到先排列，需加reverse = True)
	 thislist = [12, 63, 34, 182, 100]
	 thislist.sort(reverse = True)
	 print(thislist)    #输出为[182, 100, 63, 34, 12]
	 
	 (注：如无视升降序，只把list原序颠倒，用reverse()命令)
	 
	 o. 用copy()可复制一个list; 用 + 号可合并多个list。
	 
	 p. count()可查询某值在list中出现的次数：
	 thislist = ["apple", "banana", "cherry"]
	 x = thislist.count("apple")
	 print(x)                        #输出为1
	 
	 q. index()可查询某值在list中的索引值是多少：
	 thelist = ['apple', 'banana', 'cherry']
	 x = thelist.index('cherry')      #输出为2
	 
  LIST内置Methods大全：
        
	append() Adds an element at the end of the list
	clear()	Removes all the elements from the list
	copy()	Returns a copy of the list
	count()	Returns the number of elements with the specified value
	extend() Add the elements of a list (or any iterable), to the end of the current list
	index()	Returns the index of the first element with the specified value
	insert() Adds an element at the specified position
	pop()	Removes the element at the specified position
	remove() Removes the first item with the specified value
	reverse() Reverses the order of the list
	sort()	Sorts the list
	 
 
    
    27. Tuple:
        a. tuple由圆括号包围，和list最相似，但不具可变性（不可加减、替换、插入）
        b. 如果tuple中只有一个值，后需加逗号,，如thetuple = ("apple",)
        c. 同一tuple中可以放不同类型的数据，如tuple1 = ("abc", 34, True, "male")
        d. 查看任何数组（Collection）的数据类型，都可以用type()，如：
        	mytuple = ("apple", "banana", "cherry")
		print(type(mytuple))      #输出为<class 'tuple'>
		
		mylist = ("apple", "banana", "cherry")
		print(type(mylist))       #输出为<class 'list'>
		
	e. 如要查看tuple中是否有某值，可用if...in
		thistuple = ("apple", "banana", "cherry")
		if "apple" in thistuple:
 		print("Yes, 'apple' is in the tuple")
 		
 	f. 虽然tuple不可变，但将之改为list就能进行替换、增删，之后再改回tuple类型即可
 		x = ("apple", "banana", "cherry")
		y = list(x)
		y[1] = "kiwi"
		x = tuple(y)
   		print(x) 
   		
   	g. Tuple也可增加新值，将新值设为一个仅有一值的tuple，再将两个tuple用 + 合并即可
 	  	x = ("apple", "banana", "cherry")
		y = ("orange",)
		thetuple = x + y
		print(thetuple)
		
	h. Tuple的解包（unpacking），即将tuple内的元素分解到变量中，元素的数量需与变量数相等
	fruits = ("apple", "banana", "cherry")
	(green, yellow, red) = fruits
	print(green)
	print(yellow)
	print(red)           #输出结果为apple banana cherry
		
	(注：如果变量数少于tuple的元素数，可在其中一变量名前加*, 输出时未加*的变量将自动与自身位置
	相同的元素对应，加*的变量会与剩余位置的元素对应并形成一个list)
	fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")
	(green, yellow, *red) = fruits
	print(green)
	print(yellow)
	print(red)           #输出结果为apple banana ['cherry', 'strawberry', 'rasberry']
	
	h. 多个Tuple可以用加号 + 相加。Tuple之间甚至可以相乘，用*，从而达到重复元素的效果
	fruits = ("apple", "banana", "cherry")
	mytuple = fruits * 2
	print(mytuple)        #输出结果为("apple", "banana", "cherry", "apple", "banana", "cherry")
        
    
    28. Set
        Set用大括号{ }包裹，具有不可排序、不可索引、不可重复、不可改变的特性，但可增加、删除元素
        a. Set的无序性表现在每次运行时，元素不一定在原来的顺序位置，故不能使用索引参数
        b. len(), type()可用于查询Set的元素数目和数据类型
        c. 用for...in可loop显示Set的元素，用...in可查询某元素是否在Set中
        thisset = {"apple", "banana", "cherry"}
	print("banana" in thisset)               #输出结果为True
	d. 可使用add()，增加Set的元素，但加入的新元素位置不固定（不一定在末尾）
	e. 多个Set的元素相加，可用update()，也可用union()。且加入的数据可以是任意迭加式（iterable）对象如list, tuple等。但union()方式必须预设一个新set，而update只需在原有Set上升级
	thisset = {"apple", "banana", "cherry"}
	mylist = ["kiwi", "orange"]
	thisset.update(mylist)
	print(thisset)            #输出结果仍在原thisset内
	
	set1 = {1, 2, 3}
	set2 = {'a', 'b', 'c'}
	set3 = set1.union(set2)
	print(set3)               #输出结果在新建Set3内
	
	f. 用remove()或discard()可删除元素
	g. 用clear可清空Set的内容但保留Set，用del可删除Set本身
	h. 用intersection()可将多个Set中的重复元素挑出，形成一个新Set
	x = {"apple", "banana", "cherry"}
	y = {"google", "microsoft", "apple"}
	z = x.intersection(y)
	print(z) 
	
	i. 用对称区别升级symmetric_difference_update()，可只保留未重复元素，剔除重复元素
	   （注：只要发生了重复，原元素和duplicate元素都会被剔除，无一保留）
	j. 用isdisjoint()，可检查sets中是否有重复元素
	x = {"apple", "banana", "cherry"}
	y = {"google", "microsoft", "facebook"}
	z = x.isdisjoint(y)
	print(z)                 #如果无重复，将输出True
	
    29. Dict以大括号包围，元素以key: value的方式成对出现。它有序、可改变、不能重复(不能出现相同键值)
        a. Dict可以key name（键名）为参数进行查询
        thisdict ={
	  "brand": "Ford",
	  "model": "Mustang",
	  "year": 1964
	}
	print(thisdict["brand"])     #输出为Ford
	
	b. 用get()也可得到某键值
	x = thisdict.get("brand")
	print(x)                      #输出为Ford
	c. 用keys()可得到该Dict中所有键名，但无键值
	d. 用values()可得Dict中所有键值列表
	car = {
	"brand": "Ford",
	"model": "Mustang",
	"year": 1964
	}
	x = car.values()
	print(x)
	e. 用items()可得到Dict中所有成对的键名及键值
	x = car.items()
	print(x)
	
	f. 用if...in可查询某key是否存在于Dict中
	g. 要改变键值，用<dict_name>["key_name"] = new value
	car = {
	"brand": "Ford",
	"model": "Mustang",
	"year": 1964
	}
	car["year"] = 2022
	(如：用update()也能改变键值，但新值必须是成对的Dict，如{"year": 2022})
	
	h. 𣷹加键是通过加入新的键名并赋键值的方式，即用<dict_name>["new key_name"] = new value
	car = {
	"brand": "Ford",
	"model": "Mustang",
	"year": 1964
	}
	car["color"] = blue
	print(car)      #输出为{'brand': 'Ford', 'model': 'Mustang', 'year': 1964, 'color': 'blue'}
	(如：用update()也能𣷹加键值，但新值必须是成对的Dict，如{"year": 2022})
	
	i. 用pop()并指定键名，可删除键名及键值一对   
	       另用del <dict_name>["key_name"]也可删除，用del <dict_name>可删除整个Dict
	       用clear()可清空dict
	j. 用copy()可复制Dict，即newdict = thedict.copy()，或newdict = dict(thedict)
	
	k. 一个Dict可以包含另一个Dict，称为nested dictionaries（词典嵌套）
	
   30. if..., elif..., 及if...else条件表达式
              条件判断一般用在 >, <, >=, <=, ==, !=的逻辑关系上
	a. 使用条件时会用到缩进（indentation），通过缩进将输出范围限定在条件之内
	b. elif是在if条件之外的补充条件，可连续使用多次（二者是平级关系）
	c. else是之前条件如果都不满足，才执行的后续动作
例如：	
	age = 30
	if age >= 110:
 	  print('you\'re a superman')
	elif age >= 60:
  	  print('you\'re a senior')
	elif age >= 18:
          print('you\'re an adult')   
	elif age >= 7:
  	  print('you\'re a teenager')
	else:
    	  print('you\'re a kid')
    	  
	d. 可用 or 以及 and 来合并条件
    	  A = 200
	  B = 33
	  D = 500
	  if A > B or A > C:
  	     print("At least one of the conditions is True")
  	     
	e. if还可内置if条件，称为嵌套条件(Nested if)。嵌套条件是原if条件下的补充条件（二者是主从关系）
	x = 41
	if x > 10:
	  print("Above ten,")
	  if x > 20:                          #此嵌套条件是从属，故需再次缩进
	    print("and also above 20!")
	else:
	    print("but not above 20") 
	    
	f. 如果if后并无后续内容，可加入pass一词，系统便不会报错 
              
        
	
        


	
   

  
















  


1. 如果在命令行输入mysql后，提示它非合法命令，则解决如下：

A. 电脑–高级系统设置–环境变量–系统变量–Path(点击，添加MySQL的bin目录)
B. cmd以Administrator运行，会自动到c:\windows\system32\下，然后进入C:\program files\mysql\mysql server 8.0\bin
再运行mysql -u root -p即可出现密码提示，连接到MySQL服务器。提示符变为mysql>


2. 建立Database

 A. cmd先进入到sql文件所在目录 cd G:\learn-sql-master\mysql\
    再运行mysql -u root -p ，进入mysql
 B. 此时会提示输入密码，输入之
 C. 建立数据库：CREATE DATABASE <database name>;
 D. 删除数据库：DROP DATABASE <database name>;

 E. 查看所有数据库命令: SHOW DATABASES;
   (注：对数据库的操作命令都必须用大写，并以;结束)
   (注：可用命令SELECT 1; 来测试数据库连接是否有效)
 F. 选择数据库：USE <database name>;

 G. 创建新表：CREATE TABLE <table name> (id BIGINT NOT NULL AUTO_INCREMENT, <列名> <数据类型(最大值)> <NOT NULL>, ..., PRIMARY KEY (id) );
 H. 显示当前数据库内所有表：SHOW TABLES;
 I. 查看一个表的结构: DESC <table name>;
 J. 退出mysql：EXIT;
   (注：创建的数据库文件位于C:\ProgramData\MySQL\MySQL Server 8.0\data中，扩展名为.ibd。但ProgramData是隐藏目录，需在
   窗口的View中设置为可观看隐藏文件)
   (注：如果在列名后不加NOT NULL，该字段默认值为NULL）
 
K. 创建新库新表另一方法：
    a. 建立一个.sql文件，将相关语句写入，存在任何位置都可
    b. mysql workbench打开并执行该.sql，可一次性完成建库、建表、录入数据
       Mysql Workbench实为mysql的图形界面终端，mysql workbench还可显示纠正句法错误


3. 查询数据库

 A. 首先选择数据库：mysql> use <db name>; 
 B. 显示某数据库所有信息： SELECT * FROM <table name>;
 C. 显示某数据库带条件信息：SELECT * FROM <table name> WHERE <条件表达式>;
 D. 如果条件不只一个：SELECT * FROM <table name> WHERE <条件表达式> AND <条件表达式>;
   (注：如果条件表达式中有字符串，需用''或""围住)
   (注：有时候日期也可能设为字符串类型，需用引号) 
   (注：条件表达式一般形式为<column name> + <条件>，如果用AND语句，AND前后都要有column name，即使相同列名也不能省略
        例如：SELECT * FROM service WHERE date <= '08/15/22' AND date >='08/01/22'; 表示显示从八月初到八月中之间的所有service信息）

 E. 如果条件为或：SELECT * FROM <table name> WHERE <条件表达式> OR <条件表达式>;
 F. 如果条件为非：SELECT * FROM <table name> WHERE <条件表达式> NOT <条件表达式>;

 G. 查询模糊匹配，即找字段中含有某相似信息：SELECT * FROM <table name> WHERE <column_name> LIKE '%';
    (例如：SELECT * FROM service WHERE company LIKE 'am%'; 表示从service表中查询字段company里以am字符开头的所有信息) 
    a. %号 类似*号的作用，表示任意 0 个或多个字符
    b. '%a' 表示以a结尾的，'a%' 表示以a开头的，'%a%' 表示中间含有a的数据
    c. _表示任意单个字符。'_a_' 表示三位且中间字母是a的，'_a'  表示两位且结尾字母是a的，'a_' 表示两位且开头字母是a的

 H. 连接多个SELECT语句，将结果组合到一个集中显示：
    a. SELECT * FROM <table name> UNION SELECT * FROM <table name>; (如有重复信息，会被滤掉)
    (例如：SELECT * FROM service UNION SELECT * FROM purchase ORDER BY date; 表示将service表和purchase表的所有信息按日期排序集中显示)
    b. SELECT * FROM <table name> UNION ALL * FROM <table name>; (重复信息也会列出)



4. 投影查询
   即只查询表中指定列（column）的数据
  A. SELECT <column name>, <column name>, ...FROM <table name>; 将只返回指定列信息。
  B. 可接合条件进行投影查询: SELECT <column name>, <column name>, ... FROM <table name> WHERE <条件表达式>;
  C. 对查询结果还可进行排序，如按分数排序最后可加ORDER BY score;  数字从高到低可加DESC（即倒序）
    (SELECT后紧随的列名，在生成的结果列中会先显示，靠后的列名会后显示)
  D. 显示某列数据的总额：SELECT SUM(<column name>) FROM <table name>;


5. 分页查询
   如果查询结果为海量，就应分页，例如每页只显示10条信息
  A. LIMIT <M> OFFSET <N>; M为每页显示条数，N为从第几页开始显示
     例如：LIMIT 3 OFFSET 9; 表示每页显示不多于3条，从第9页开始显示

  B. OFFSET后的数字可以事先预算出来，计算公式为：每页显示条数 X (页索引数 - 1)
     例如：如需每页显示3条，新产生第一页的OFFSET= 3 x (1-1)=0，故首次分页查询的命令即为LIMIT 3 OFFSET 0。第二次(页)即为LIMIT 3 OFFSET 3。

  C. 在分页查询前，还能预计算总共会产生几页信息。公式为：信息总条数/每页信息条数，所得整数 + 余数
     例如：共有10条信息，每页需显示3条，总共产生页数=10/3，整数3+余数1=4，即共有4页产生
    

6. 聚合查询
   A. 查询表内共有多少条（行）信息用COUNT命令：SELECT COUNT(*) FROM <table name>;
      （注：此查询结果会显示成一个列名为Count(*)的二维表格，如果想将Count换为其他别名，可用：SELECT COUNT(*) <alias> FROM <table name>; ）
  
   B. 查询表内某列的平均值用AVG命令：SELECT AVG(列名) FROM <table name>; 另还可查最大值MAX(列名)，最小值(列名), 总和值(列名)
       (注：查平均值的列必须都是数字类型)

   C. 还可将聚合查询与投影查询相结合，但投影查询命令需前置，二者用逗号间隔
      例如：SELECT <column name>, COUNT(*) FROM <table name> GROUP BY <column name>;

   D. 分组聚合查询，将更加高效：SELECT COUNT(*) FROM <table name> GROUP BY <列名>;
      例如：SELECT COUNT(*) FROM students GROUP BY class_id; 将按班级不同，列出每班学生人数。
      如想显示每班对应人数各为多少，可加上投影查询，如：SELECT class_id, COUNT(*) FROM students GROUP BY class_id;


7. 多表查询
   A. 同时查询多个表：SELECT * FROM <table name>, <table name>;
      (注：多表中可能有相同列名，为避免混淆可设置为其他别名，另外表名也可设为其他别名)
   B. 多表查询也可加入条件语句
     例如：SELECT s.id sid, s.name, s.gender, s.score, c.id cid, c.name cname FROM students s, classes c WHERE c.id = 3 AND s.gender = "F";
     表示查询students & classes两表中三班的所有女生的相关信息

    （注：多表查询的结果可能非常巨大，建议加入条件限制语句）

8. 连接查询
   先确定一个主表作为结果集，然后把其他分表的某列数据选择性连接到主表结果上
   A. 语句：SELECT <列名>, <列名>, <分表列名> <分表列名别名>, <列名> FROM <表1> INNER JOIN <表2> ON <条件语句>;
      (注：连接分表的列名很可能会与主表某列名重复，为避免混淆，可将此分表列名取个别名，该别名将出现在新的结果集表格中)
   例如：SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score
         FROM students s
         INNER JOIN classes c
         ON s.class_id = c.id;
        表示将classes表中的id列连接到主表students表中，对应S表中的class_id列，并以新列名class_name出现，同时显示其他列信息。
    (注：如果语句太长，可在需提行处回车，下行会出现->，然后继续输入语句，最后结尾处加;)

9. 修改数据
   包括INSERT（插入新记录），UPDATE（修改更新记录），DELETE（删除记录）

   A. 添加记录： INSERT INTO <table name> (<column name1>, <column name2>, ...) VALUES (新值1, 新值2, ...); 
     (注：列的顺序可随意，但values值必须准确对应该列)
     (注：INSERT仅用于添加新行各类数据，添加时需将该行所有列的数值都加入。如只需为某行中某一列空数据加入新值，则须用UPDATE命令）

   B. 一次添加多条记录： INSERT INTO <table name> (<column name1>, <column name2>, ...) VALUES (新值1, 新值2, ...), (新值3, 新值4, ...), (新值5, 新值6, ...);

   C. 修改记录： UPDATE <table name> SET <列名1>=新值1, <列名2>=新值2, ... WHERE <条件语句>;
     (注：修改记录的WHERE条件常常是其id值，从而指向该条记录进行修改。新值若为字符串，需加引号)
   D. 一次修改多条记录：UPDATE <table name> SET <列名1>=新值1, <列名2>=新值2, ... WHERE <多个条件>;
     (注：SET内容还可用表达式，如SET score=score+10，从而提高效率）
     (注：修改记录务必要加上条件，否则全表都会被瞬间修改)

   E. 删除记录：DELETE FROM <table name> WHERE <条件>;
     ( 删除纪录的条件一般也设为其id值)

   *F. 替换记录：REPLACE INTO <table name> (<列名>, <列名>, <列名>, <列名>) VALUES (新值1, 新值2, 新值3, 新值4);
      REPLACE是将已有某条（行）记录所有列全部替换为新值

   *G.忽略式添加记录：INSERT IGNORE INTO <table name> (<列名>, <列名>) VALUES (新值1, 新值2);
     如果要插入一条新纪录（INSERT），但担心纪录已存在添加后会覆盖原数据，可采用忽略式添加记录。如果原无纪录即添加，有纪录则无任何动作

10. 修改表格结构
   A. 删除某表内的某一列：ALTER TABLE <table name> DROP COLUMN <column name>;
   B. 增加一列：ALTER TABLE <table name> ADD COLUMN <new column name> 数据类型 NOT NULL;
      在某列之后增加一列：ALTER TABLE <table name> ADD <column name> <数据类型> AFTER column name; 
   C. 改某列名：ALTER TABLE <table name> CHANGE COLUMN <old column name new colomn name> 数据类型 NOT NULL;
      (注：VARCHAR(10)表示可有10个字符的字符串变量)
      (注：新增一列后该列数据为空值，如需在列中填入数据，只能用UPDATE命令而非INSERT)
   D. 修改表名: ALTER TABLE <old table_name> RENAME TO <new table_name>;
   E. 查看列名及其类型：SHOW COLUMNS FROM <table name>;
 
   F. 修改字段名称及类型：
      MODIFY修正：ALTER TABLE students MODIFY date VARCHAR(8) NOT NULL;  将日期字段类型修正为字符串变量，不用管之前的类型为何
      CHANGE改变：ALTER TABLE students CHANGE id class_id INT;  将字段从旧字段名改为新字段名和类型，需注明旧字段为何


11. 将当前表内符合某些条件的纪录组合成另一个新表：
     CREATE TABLE <new table name> SELECT * FROM <old table name> WHERE <条件>;


12. 查询是否有空值
    A. 使用命令IS NULL或IS NOT NULL
    B。例如：SELECT * FROM <table name> WHERE <column name> IS NULL;


13. 正则表达式（Regular Expression，简写REGEXP)
    用单个字符串来描述、匹配一系列符合某个句法规则的字符串。通常被用来检索、替换符合某模式的文本。 
    ^:开始字符串  $：结尾字符串  [...]:字符集合    |:或条件，竖线前有一条件，竖线后是另一条件，二者是或关系
     (例如：SELECT name FROM service WHERE company REGEXP '^st'; 表示从service表中查询company名字中以st开头的公司)



14. Mysql事务(Transaction)
    A. BEGIN: 开始事务
    B. COMMIT: 事务确认
    （例如更新一条记录，可做如下动作：
    a. BEGIN;
    b. UPDATE students SET birth='05/05/02' WHERE id=8;
    c. COMMIT;
    这样就可将更新记录永久提交）
    C. ROLLBACK 回滚事务
     （如果出错，可以回滚：
    a. BEGIN;
    b. UPDATE students SET birth='05/05/02' WHERE id=8;
    c. ROLLBACK; 
       如此先前的记录就不会被提交，用SELECT也不会显示记录被改，可重新输入新的更新）




15. 在Mysql Workbench上运行mysql命令
    A. 图形界面，连接数据库无需输入密码（密码已存入vault中）
    B. 运行时，命令无需用大写，但需使用分号结尾
    D. 回车只能提行，运行命令需点击右上的闪电icon
    E. 全程可用鼠标光标在需修改处点击进入



16. 创建新表可用以下语句

CREATE TABLE credit 
(id BIGINT NOT NULL AUTO_INCREMENT, 
type varchar(20), 
circle INT, 
cr_amount INT, 
PRIMARY KEY(id) );



17. 创建临时表用以下语句

CREATE TEMPORARY TABLE credit 
(id BIGINT NOT NULL AUTO_INCREMENT, 
type varchar(20), 
circle INT, 
cr_amount INT, 
PRIMARY KEY(id) );

注：临时表可用任何命令，但SHOW TABLES不会显示，且退出MYSQL后再进入也无法再找到



18. 快速复制某旧表（包含结构与数据）为另一新表
    CREATE TABLE <new table name> SELECT * FROM <old table name>;


19. 快速复制与某旧表结构相同的新表（无内容）
a. 显示某表结构： SHOW CREATE TABLE <table name> \G;
显示如下：
CREATE TABLE `mission` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `type` varchar(20) NOT NULL,
  `date` varchar(8) NOT NULL,
  `circle` int NOT NULL,
  `amount` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB;

b. 拷贝以上语句并执行之，即可复制相同结构的新表



20. 用UNIQUE <column_name>，可防止某列输入重复信息
  例如在创建新表时，
CREATE TABLE students
(
   first_name CHAR(20) NOT NULL,
   last_name CHAR(20) NOT NULL,
   sex CHAR(10),
   UNIQUE (last_name, first_name)
);


21. 统计并显示重复数据
先确定可能出现重复的字段，如circle and amount。然后用以下语句：

mysql> SELECT COUNT(*) as repetitions, circle, amount
    -> FROM mission
    -> GROUP BY circle, amount
    -> HAVING repetitions > 1;

22.
SELECT VERSION( );	查看服务器版本信息
SELECT DATABASE( );	查看当前数据库名 (如果先前并未选择数据库，则返回NULL)
SELECT USER( ):   	查看当前用户名



23. 如何屏蔽secure-file-priv
导出MYSQL数据时，可能会出现running secure-file-priv，不能导出。此时需屏蔽secure-file-priv

a. In sudo status, nano /etc/my.cnf and insert secure-file-priv = "" under [mysqld]
b. restart mysqld
c. mysql>SHOW VARIABLES LIKE 'secure_file_priv';

如果其值显示为空，即成功。可进行导出数据。


24. 导出数据

mysql> SELECT * FROM <table_name> INTO OUTFILE '/tmp/<file_name.txt>';
数据即被导出形成TXT文件存于/tmp/中。




25. 导出表
可将整个表格导出，以TXT方式存在某目录下，从根目录下执行命令：
$ mysqldump -u root -p <database name> <table name> > <dump_name>.txt;
然后会提示输入密码，输入即可


26. 要导出整个数据库的所有表格数据，可使用以下命令：
$ mysqldump -u root -p <database name> > <dump_name>.txt;



















































